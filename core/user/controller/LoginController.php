<?php


namespace core\user\controller;


use core\base\model\UserModel;
use core\user\helpers\ValidationHelper;
use libraries\SendMail;

class LoginController extends BaseUser
{

    use ValidationHelper;


    protected function inputData()
    {
        parent::inputData(); // TODO: Change the autogenerated stub

        if(empty($this->parameters['alias'])){
            exit('Досвидания');
        }

        if($this->parameters['alias'] === 'logout'){
            UserModel::instance()->logout();
        }

        if($this->isPost()){

            $this->checkToken();

            unset($_POST['token']);

            switch ($this->parameters['alias']){

                case 'registration':

                    $this->registration();
                    break;

                case 'login':

                    $this->login();
                    break;

            }

            // запрос на востановления пароля
        }elseif ($this->parameters['alias'] === 'restore_password' ){

            // 1-й этап. Формирование востановительного токена и отправка письма пользователю
            if(!empty($this->parameters['user'])){
                $this->restorePassword();

            // 2-й этап. Переход по ссылке отправленной на почту пользователю.
            }elseif (!empty($this->parameters['token'])){

                $this->checkRestoreToken();
                $this->redirect($this->alias());

            }

        }


        $this->redirect(PATH);


    }



    // проверка востановительного токена и авторизация пользователя.
    protected function checkRestoreToken(){

        // извлекаем токен
        $token = base64_decode(urldecode($this->parameters['token']));

        if(!$token){
            exit('Досвидания');
        }

        // ищем токен в БД
        $res = $this->model->get('visitors', [
            'where' => ['restore_token' => $token],
            'limit' => 1,
            'single' => true
        ]);

        if(!$res){
            exit('Досвидания');
        }

        // удаляем найденный токен из БД
        $this->model->edit('visitors', [
            'fields' => ['restore_token' => null],
            'where' => ['id' => $res['id']]
        ]);

        // авторизируем пользователя. И перенаправляем в личный кабинет
        if(UserModel::instance()->checkUser($res['id'])){

            $this->sendSuccess($this->translateEl('Добро пожаловать') . ' ' . $res['name']);
            $this->redirect($this->alias('lk'));

        }

        $this->sendError('Произошла ошибка при обновлении пароля', null, 'success');

        $this->redirect($this->alias());

    }




// востановление пароля путем отправки на email пользователя письма со сылкой содержащей специально сгенерированный токен.
    protected function restorePassword(){

        // ивлекаем логин пользователя из адресной строки
        $login = base64_decode(urldecode($this->parameters['user']));

        if(!$login){
            exit('Досвидания');
        }

        //проверяем наличие в БД пользователя с таким логином
        $res = $this->model->get('visitors', [
            'where' => ['phone' => $login, 'email' => $login],
            'condition' => ['OR'],
            'limit' => 1,
            'single' => true
        ]);

        // если у пользователя есть email куда можно отправить письмо
        if(!empty($res['email'])){

            // формируем токен, по которому будем идентифицировать пользователя и востанавливать пароль
            $token = md5($res['email'] . mt_rand(0, 1000000) . microtime());

            // формируем ссылку при переходе по которой будем востанавливать пароль. Ссылка содержит токен.
            $href = ($_SERVER['REQUEST_SCHEME'] ?? 'http') . '://' . $_SERVER['HTTP_HOST'] . '/login/restore_password/token/' . urlencode(base64_encode($token)) . END_SLASH;
            $body = '<h3 style="color: red"><a href="'. $href.'">' . $this->translateEl('Для востановления пароля перейдите по ссылке') . '</a></h3>';

            $sendMail = new SendMail();
            $sendMail->setMailBody($body);

            // отправляем письмо и если оно отправленно без ошибок, то записываем токен в БД
            if($sendMail->send($res['email'], $this->translateEl('Востановление пароля на сайте'). ' ' . $_SERVER['HTTP_HOST'])){

                $this->sendSuccess('На Ваш Е-mail выслано письмо для востановления пароля');

                $this->model->edit('visitors', [
                    'fields' => ['restore_token' => $token],
                    'where' => ['id' => $res['id']]
                ]);

                return;

            }

            $this->sendError('Произошла внутренняя ошибка');

        }

        $this->sendError('E-mail для востановления пароля не найден');

    }




    // авторизация пользователя
    protected function login(){

        $login = $this->clearStr($_POST['login'] ?? '');
        $password = $this->clearStr($_POST['password'] ?? '');

        if(!$login || !$password){
            $this->sendError('Заполните поля для авторизации');
        }

        $password = md5($password);

        // если есть в логине @, то это email
        if(!preg_match('/@/', $login)){
            $login = $this->phoneField($login);
        }

        // ищем в БД совпадение $login с полями 'phone' или 'email'
        $res = $this->model->get('visitors', [
           'where' => ['phone' => $login, 'email' => $login],
            'condition' => ['OR'],
            'limit' => 1,
            'single' => true
        ]);

        // если такого логина нет или пароль у найденного не совпадает выводим ошибку. Во втором случае дополнительно даем ссылку для востановления пароля
        if(!$res || $res['password'] !== $password){

            $message = 'Неправильный логин или пароль';

            if($res && $res['password'] !== $password){
                $message .= '<br><a style="text-decoration: underline; font-size: 18px; color: white" href="'.
                    $this->alias(['login' => 'restore_password', 'user' => urlencode(base64_encode($login))]) .'">Для востановления пароля перейдите по ссылке</a>';
            }

            $this->sendError($message);
        }

        // авторизуем пользователя устанавливая куки
        if(UserModel::instance()->checkUser($res['id'])){
            $this->sendSuccess($this->translateEl('Добро пожаловать') .' '. $res['name']);
            return;
        }

        $this->sendError('Произошла ошибка авторизации');

    }




    // вызывается при регистрации нового пользователя и редактирования учетных данных уже зарегистрирования.
    protected function registration(){

        $_POST['password'] = trim($_POST['password'] ?? '');
        $_POST['confirm_password'] = trim($_POST['confirm_password'] ?? '');

        if($this->userData && !$_POST['password']){
            unset($_POST['password']);
        }

        if(isset($_POST['password']) && $_POST['password'] !== $_POST['confirm_password']){
            $this->sendError($this->translateEl(' Пароли не совпадают'), null, 'error', 'log_user.txt');
        }

        unset($_POST['confirm_password']);

        // массив данных устанавливающий какие поля нужно на что валидировать (на пустоту, на определенный формат и т.д)
        $validation = [
            [
                'name' => ['emptyField'],
                'phone' => ['emptyField', 'phoneField', 'numericField'],
                'email' => ['emptyField', 'emailField'],
                'password' => ['emptyField'],
            ],
            [
                'name' => ['emptyField'],
                'phone' => ['emptyField', 'phoneField', 'numericField'],
                'email' => ['emptyField', 'emailField'],
                'password' => ['emptyField'],
                'company_name' => ['emptyField'],
            ]

        ];

        $translation = [
            'name' => 'ФИО',
            'phone' => 'Телефон',
            'email' => 'E-mail',
            'company_name' => 'Название компании'
        ];

        // тип клиента (физ., юр.)
        $type = !empty($_POST['type']) ? 1 : 0;

        $validationResult = [];

        // перебираем данные пришедшие от пользователя
        foreach ($_POST as $key => $item){

            // если для данного поля есть в $validation метод валидации, то перебираем их проводя валидацию полей
            if(!empty($validation[$type][$key])){

                foreach ($validation[$type][$key] as $method){

                    if($this->userData && !$item){
                        unset($_POST[$key]);
                        continue 2;
                    }

                    $_POST[$key] = $item = $this->$method($item, $translation[$key] ?? $key);
                }

                $validationResult[] = $key;

            }

        }

        // количество валидируемых полей из массива $validation должно совпадать с количеством пришедших в $_POST.
        // Это защита от удаления кокаго-нибудь поля пользователем в html. Если $this->userData установлен, то зарегистрированный пользователь редактирует учетные данные
        if(!$this->userData && count($validationResult) !== count($validation[$type])){
            $this->sendError('Не балуйтесь');
        }

        $where = [
            '(phone' => $_POST['phone'],
            ')email' => $_POST['email'],
        ];

        $condition = ['OR'];

        if ($this->userData){

            $where['!id'] = $this->userData['id'];
            $condition[] = 'AND';
        }

        // проверяем, не зарегистрирован ли пользователь с этим телефоном или email
        $res = $this->model->get('visitors', [
           'where' => $where,
           'condition' => $condition,
           'limit' => 1,
           'single' => true
        ]);

        // если зарегистрирован, выводим ошибку
        if($res){

            $field = $res['phone'] === $_POST['phone'] ? $this->translateEl('Телефон') : 'Email';
            $this->sendError('Такой ' . $field . ' уже зарегистрирован');

        }

        // хешируем пароль
        if(!empty($_POST['password'])){
            $_POST['password'] = md5($_POST['password']);
        }

        // уже зарегистрированный пользователь меняет свои учетные данные. Редактируем данные пользователя в БД
        if($this->userData){

            $id = $this->userData['id'];

            $this->model->edit('visitors', [
               'where' => ['id' => $id]
            ]);

        }else{ // Добавление нового пользователя в БД

            $id = $this->model->add('visitors', [
               'return_id' => true
            ]);

        }

        if(!empty($id)){

            //проверка и установление куки
            if(UserModel::instance()->checkUser($id)){
                $this->sendSuccess($this->userData ? $this->translateEl('данные обновлены') : $this->translateEl('Регистрация прошла успешно'));
                return;
            }

        }

        $this->sendError('Произошла внутренняя ошибка');

    }


}

























